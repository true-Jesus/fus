
document.addEventListener('DOMContentLoaded', function() {
    const chatList = document.querySelector('.chat-list');
    const chatMessages = document.querySelector('.chat-messages');
    const messageInput = document.getElementById('messageInput');
    const sendMessageButton = document.getElementById('sendMessageButton');
    const userNameHeader = document.getElementById('chatUserName');
    const addFileButton = document.querySelector('.add-file-button');
    const fileInput = document.getElementById('fileInput');
    const addEmojiButton = document.querySelector('.add-emoji-button');
    const emojiModal = document.querySelector('.emoji-modal');
    const emojiModalContent = document.querySelector('.emoji-modal-content');
    const emojis = ['üòÄ', 'üòÅ', 'üòÇ', 'ü§£', 'üòÉ', 'üòÑ', 'üòÖ', 'üòÜ', 'üòâ', 'üòä', 'üòã', 'üòé', 'üòç', 'üòò', 'üòó', 'üòô', 'üòö', 'üò≥', 'ü§Ø', 'ü§™', 'üòµ', 'üò¥', 'ü§§', 'üò•', 'üòì', 'üò™', 'üò≠', 'ü•µ', 'ü•∂', 'ü•¥', 'ü§¢', 'ü§Æ', 'ü§ß', 'ü§í', 'ü§ï', 'üòá', 'ü§†', 'ü§°', 'ü•≥', 'ü•¥', 'ü§´', 'ü§≠', 'üßê', 'ü§®', 'üôÑ', 'üòí', 'üò§', 'üò†', 'üò°', 'ü§¨', 'üò∑', 'ü§í', 'ü§ï'];
    const chatListContainer = document.querySelector('.chat-list-container');
    const toggleChatListButton = document.querySelector('.toggle-chat-list');

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
    const urlParams = new URLSearchParams(window.location.search);
    const initialRoomID = urlParams.get('RoomID');
    const initialOtherUserNickname = urlParams.get('OtherUserNickname');

    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ cookie
    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
        return null;
    }

    const userNickname = getCookie('user');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ cookie
    if (!userNickname) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ cookie!');
        // –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        return;
    }

    let websocket = null;
    let currentRoomID = null; // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã

    function sendMessageToWebSocket(message) {
        if (websocket && websocket.readyState === WebSocket.OPEN) {
            websocket.send(JSON.stringify(message));
        } else {
            console.error("WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.");
        }
        //  const messageElement = document.createElement("div");
        //  messageElement.classList.add("message");
        //  messageElement.innerHTML = `<strong>${message.author}:</strong> ${message.body}`;
        //  chatMessages.appendChild(messageElement);
        //  chatMessages.scrollTop = chatMessages.scrollHeight;

    }

    function displayMessage(message) {
        const messageElement = document.createElement("div");
        messageElement.classList.add("message");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        const isCurrentUser = message.author === userNickname;
        if (isCurrentUser) {
            messageElement.classList.add("outgoing");
        } else {
            messageElement.classList.add("incoming");
        }

        messageElement.innerHTML = `<strong>${message.author}:</strong> ${message.body}`;
        chatMessages.appendChild(messageElement);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function connectWebSocket(roomID) {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if (websocket) {
            websocket.close();
            websocket = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º websocket
        }

        const wsUrl = `ws://localhost:8081/entry?room=${roomID}`;
        websocket = new WebSocket(wsUrl);
        currentRoomID = roomID; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É

        websocket.onopen = function (event) {
            console.log(`–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ websocket (–∫–æ–º–Ω–∞—Ç–∞: ${roomID})`);
        };

        websocket.onmessage = function (event) {
            const message = JSON.parse(event.data);
            displayMessage(message);
        };

        websocket.onclose = function (event) {
            console.log(`–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç websocket (–∫–æ–º–Ω–∞—Ç–∞: ${roomID})`);
            websocket = null;
            currentRoomID = null;
        };

        websocket.onerror = function (error) {
            console.error("WebSocket error:", error);
            websocket = null;
            currentRoomID = null;
        };
    }
    function sendMessage(messageText, file) {
        if (file) {
            const reader = new FileReader();

            reader.onload = function(event) {
                const fileType = file.type;
                if (fileType.startsWith('image/')) {
                    // –ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    const imageElement = document.createElement('img');
                    imageElement.src = event.target.result;
                    imageElement.style.maxWidth = '200px';
                    //–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ WebSocket —Å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    const message = {
                        author: userNickname,
                        body: event.target.result, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        room: currentRoomID,
                        type: "image" // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                    };
                    sendMessageToWebSocket(message)
                } else if (fileType.startsWith('text/')) {
                    // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç
                    //–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ WebSocket —Å —Ç–µ–∫—Å—Ç–æ–º
                    const message = {
                        author: userNickname,
                        body: event.target.result,
                        room: currentRoomID,
                        type: "text"
                    };
                    sendMessageToWebSocket(message);
                } else {
                    // –ï—Å–ª–∏ —ç—Ç–æ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ñ–∞–π–ª–∞
                    const linkElement = document.createElement('a');
                    linkElement.href = event.target.result;
                    linkElement.download = file.name;
                    linkElement.textContent = `–§–∞–π–ª: ${file.name}`;
                    //–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ WebSocket —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ñ–∞–π–ª
                    const message = {
                        author: userNickname,
                        body: event.target.result,
                        room: currentRoomID,
                        type: "file"
                    };
                    sendMessageToWebSocket(message);
                }
                chatMessages.scrollTop = chatMessages.scrollHeight;
            };
            if (file.type.startsWith('text/')) {
                reader.readAsText(file);
            } else {
                reader.readAsDataURL(file);
            }
        } else {
            //–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ WebSocket
            const message = {
                author: userNickname,
                body: messageText,
                room: currentRoomID,
                type: "text"
            };
            sendMessageToWebSocket(message)
        }
        messageInput.value = '';
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    function sendMessageToWebSocket(message) {
        if (websocket && websocket.readyState === WebSocket.OPEN) {
            websocket.send(JSON.stringify(message));
        } else {
            console.error("WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.");
        }
        const messageElement = document.createElement("div");
        messageElement.classList.add("message");
        messageElement.innerHTML = `<strong>${message.author}:</strong> ${message.body}`;
        chatMessages.appendChild(messageElement);
        chatMessages.scrollTop = chatMessages.scrollHeight;

    }

    addFileButton.addEventListener('click', () => {
        fileInput.click();
    });

    function closeEmojiModal() {
        emojiModal.style.display = 'none';
    }

    fileInput.addEventListener('change', function() {
        const file = fileInput.files[0];
        if (file) {
            sendMessage('', file);
        }
    });

    addEmojiButton.addEventListener('click', () => {
        if (emojiModal.style.display === 'block') {
            closeEmojiModal();
        } else {
            emojiModal.style.display = 'block';
        }
    });

    emojis.forEach(emoji => {
        const emojiSpan = document.createElement('span');
        emojiSpan.textContent = emoji;
        emojiSpan.addEventListener('click', () => {
            messageInput.value += emoji;
            closeEmojiModal();
        });
        emojiModalContent.appendChild(emojiSpan);
    });

    window.addEventListener('click', (event) => {
        if (event.target === emojiModal) {
            closeEmojiModal();
        }
    });

    messageInput.addEventListener('keydown', function(event) {
        if (event.key === 'Enter') {
            event.preventDefault();
            const messageText = messageInput.value;
            sendMessage(messageText);
        }
    });

    function loadMessages(roomID, otherUserNickname) {
        userNameHeader.textContent = otherUserNickname;
        chatMessages.innerHTML = '';

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –∫–æ–º–Ω–∞—Ç–µ
        connectWebSocket(roomID);
        //sendMessage("", null)

    }

    function addChatToList(roomID, otherUserNickname) {
        const existingChat = Array.from(chatList.children).find(chatItem => {
            return chatItem.dataset.roomId === roomID;
        });

        if (!existingChat) {
            const chatItem = document.createElement('div');
            chatItem.classList.add('chat-item');
            chatItem.dataset.roomId = roomID;
            chatItem.innerHTML = `
                <div class="user-icon">${otherUserNickname[0].toUpperCase()}</div>
                <div class="user-info">
                    <span class="username">${otherUserNickname}</span>
                    <span class="last-message">–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</span>
                </div>
            `;
            chatItem.addEventListener('click', () => {
                loadMessages(roomID, otherUserNickname);
            });
            chatList.appendChild(chatItem);
        }
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
    function loadChatList() {
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ cookie
        const userNickname = getCookie('user');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ cookie
        if (!userNickname) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ cookie!');
            return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }
        const url = new URL('/rooms', window.location.origin); // –ò—Å–ø–æ–ª—å–∑—É–µ–º URL, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        url.searchParams.append('user', userNickname); // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä userNickname
        fetch(url, {
            method: 'GET', // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ GET
        })
            .then(response => response.json())
            .then(data => {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫
                data.forEach(chat => {
                    addChatToList(chat.RoomID, chat.OtherUserNickname);
                });

                // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–∫–æ–π-—Ç–æ —á–∞—Ç
                if (initialRoomID && initialOtherUserNickname) {
                    loadMessages(initialRoomID, initialOtherUserNickname);
                }
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤:', error);
            });
    }

    // –ò–∑–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    sendMessageButton.addEventListener('click', function() {
        const messageText = messageInput.value;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ websocket –∏ –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        if (websocket && websocket.readyState === WebSocket.OPEN && messageText.trim() !== "") {
            const message = {
                author: userNickname,
                body: messageText,
                room: currentRoomID, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π RoomID
                type: "text"
            };
            sendMessageToWebSocket(message);
            sendMessage("",null);
        } else {
            console.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ.");
        }
    });

    toggleChatListButton.addEventListener('click', () => {
        chatListContainer.classList.toggle('collapsed');
    });
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    loadChatList();
});